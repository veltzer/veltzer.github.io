<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Media Collection</title>

    <!-- Favicon Links -->
    <link rel="icon" href="favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="favicon.svg">

    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- js-yaml library to parse the YAML file -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
    <style>
        /* Custom font and minor style adjustments */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* A light grey background */
        }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        .nav-button {
            transition: all 0.2s ease-in-out;
        }
        .nav-button.active {
            background-color: #4f46e5;
            color: white;
            font-weight: 600;
        }
        .stat-card {
            background-color: white;
            padding: 1rem;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            text-align: center;
        }
        .stat-value {
            display: block;
            font-size: 1.875rem;
            font-weight: 700;
            color: #4f46e5;
        }
        .stat-label {
            display: block;
            font-size: 0.875rem;
            color: #6b7280;
            margin-top: 0.25rem;
        }
        /* Tooltip styles */
        .tooltip-container {
            position: relative;
            display: inline-block;
        }
        .tooltip-text {
            visibility: hidden;
            width: 220px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 150%;
            left: 50%;
            margin-left: -110px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .tooltip-text::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #555 transparent transparent transparent;
        }
        .tooltip-container:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
    </style>
</head>
<body class="antialiased text-gray-800">

    <div class="container mx-auto p-4 md:p-8">
        
        <header class="text-center mb-8">
            <h1 id="page-title" class="text-4xl md:text-5xl font-bold text-gray-900"></h1>
            <p id="page-subtitle" class="text-lg text-gray-600 mt-2"></p>
        </header>

        <!-- Statistics container -->
        <section id="stats-container" class="mb-8"></section>

        <!-- Navigation container - buttons will be generated by JS -->
        <nav id="main-nav" class="flex justify-center mb-8 space-x-2 md:space-x-4"></nav>

        <!-- Search Input -->
        <div class="mb-8 max-w-2xl mx-auto">
             <label for="search-input" class="sr-only">Search</label>
             <input type="text" id="search-input" placeholder="Search..."
                   class="w-full p-4 text-lg border-2 border-gray-300 rounded-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition">
        </div>

        <!-- Loading and Error States -->
        <div id="status-message" class="text-center text-xl text-gray-500"></div>

        <!-- Container for the Cards -->
        <main id="items-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"></main>

    </div>

    <footer class="text-center text-gray-500 mt-8 py-4 border-t">
        <p>Page Visits: <span id="visitor-count-container"><span id="visitor-count">Loading...</span></span></p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const itemsContainer = document.getElementById('items-container');
            const searchInput = document.getElementById('search-input');
            const statusMessage = document.getElementById('status-message');
            const pageTitle = document.getElementById('page-title');
            const pageSubtitle = document.getElementById('page-subtitle');
            const mainNav = document.getElementById('main-nav');
            const statsContainer = document.getElementById('stats-container');

            let allItems = []; // To store the fetched data
            let activeConfig = {}; // To store the config of the current view
            
            // --- Helper Function ---
            function formatDate(dateString) {
                if (!dateString) return null;
                // Extracts just the<x_bin_660>-MM-DD part from the UTC string
                return dateString.substring(0, 10);
            }

            // --- 1. MASTER CONFIGURATION OBJECT ---
            // This is the single source of truth. Add a new object here to add a new page.
            const dataSources = {
                'videos': {
                    file: 'data/video_series.yaml',
                    navTitle: 'Video Series',
                    title: 'Watched TV Series',
                    subtitle: "A searchable list of TV series I've watched.",
                    searchPlaceholder: 'Search by name, review, location...',
                    searchFields: ['name', 'review', 'location'],
                    renderDetails: function(item) {
                        var seasons = item.seasons_seen ? item.seasons_seen.join(', ') : 'N/A';
                        var html = '<p><span class="font-semibold">Seasons Seen:</span> ' + seasons + '</p>';
                        var date = formatDate(item.date_utcz);
                        if (date) {
                             html += '<p><span class="font-semibold">Date Watched:</span> ' + date + '</p>';
                        }
                        if (item.location) {
                            html += '<p><span class="font-semibold">Location:</span> ' + item.location + '</p>';
                        }
                        if (item.imdb_id) {
                            html += '<p class="mt-2"><a href="https://www.imdb.com/title/tt' + item.imdb_id + '/" target="_blank" class="text-indigo-600 hover:text-indigo-800 transition-colors">IMDb</a></p>';
                        }
                        return html;
                    },
                    renderStats: function(items) {
                        var deviceCounts = {};
                        var totalSeasons = 0;
                        items.forEach(function(item) {
                            if (item.device) {
                                deviceCounts[item.device] = (deviceCounts[item.device] || 0) + 1;
                            }
                            if (item.seasons_seen) {
                                totalSeasons += item.seasons_seen.length;
                            }
                        });

                        var html = '<div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">';
                        html += '<div class="stat-card"><span class="stat-value">' + items.length + '</span><span class="stat-label">Total Series</span></div>';
                        html += '<div class="stat-card"><span class="stat-value">' + totalSeasons + '</span><span class="stat-label">Total Seasons</span></div>';
                        
                        Object.keys(deviceCounts).forEach(function(device) {
                            html += '<div class="stat-card"><span class="stat-value">' + deviceCounts[device] + '</span><span class="stat-label">' + device + '</span></div>';
                        });

                        html += '</div>';
                        return html;
                    }
                },
                'audio': {
                    file: 'data/audio_courses.yaml',
                    navTitle: 'Audio Courses',
                    title: 'Listened to Audio Courses',
                    subtitle: "A searchable list of audio courses I've listened to.",
                    searchPlaceholder: 'Search by name, review, lecturer...',
                    searchFields: ['name', 'review', 'lecturers', 'location'],
                    renderDetails: function(item) {
                        var lecturers = item.lecturers ? item.lecturers.join(', ') : 'N/A';
                        var html = '<p><span class="font-semibold">Lecturer(s):</span> ' + lecturers + '</p>';
                        var date = formatDate(item.date_utcz || item.date_ended_utcz || item.date_started_utcz);
                         if (date) {
                             html += '<p><span class="font-semibold">Date:</span> ' + date + '</p>';
                        }
                        if (item.location) {
                            html += '<p><span class="font-semibold">Location:</span> ' + item.location + '</p>';
                        }
                        if (item.progress) {
                            html += '<p><span class="font-semibold">Progress:</span> ' + item.progress + '</p>';
                        }
                        return html;
                    },
                    renderStats: function(items) {
                         var deviceCounts = {};
                         var lecturerSet = new Set();
                         items.forEach(function(item) {
                            if (item.device) {
                                deviceCounts[item.device] = (deviceCounts[item.device] || 0) + 1;
                            }
                            if (item.lecturers) {
                                item.lecturers.forEach(function(lecturer) {
                                    lecturerSet.add(lecturer);
                                });
                            }
                        });

                        var html = '<div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">';
                        html += '<div class="stat-card"><span class="stat-value">' + items.length + '</span><span class="stat-label">Total Courses</span></div>';
                        html += '<div class="stat-card"><span class="stat-value">' + lecturerSet.size + '</span><span class="stat-label">Unique Lecturers</span></div>';

                        Object.keys(deviceCounts).forEach(function(device) {
                            html += '<div class="stat-card"><span class="stat-value">' + deviceCounts[device] + '</span><span class="stat-label">' + device + '</span></div>';
                        });

                        html += '</div>';
                        return html;
                    }
                }
            };

            // --- 2. Dynamically Generate Navigation ---
            function generateNav(activeDataType) {
                mainNav.innerHTML = ''; // Clear existing nav
                for (const [key, config] of Object.entries(dataSources)) {
                    const navButton = document.createElement('a');
                    navButton.href = '?data=' + key;
                    navButton.textContent = config.navTitle;
                    navButton.className = 'nav-button px-4 py-2 md:px-6 md:py-3 rounded-full bg-white shadow-sm hover:bg-gray-100';
                    if (key === activeDataType) {
                        navButton.classList.add('active');
                    }
                    mainNav.appendChild(navButton);
                }
            }

            // --- 3. Fetch and Parse YAML Data ---
            async function loadData() {
                const urlParams = new URLSearchParams(window.location.search);
                const dataType = urlParams.get('data') || Object.keys(dataSources)[0]; // Default to the first source
                activeConfig = dataSources[dataType];

                if (!activeConfig) {
                    statusMessage.innerHTML = '<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded"><p>Error: Invalid data type in URL. Check available types.</p></div>';
                    return;
                }
                
                generateNav(dataType);

                // Update UI elements based on config
                pageTitle.textContent = activeConfig.title;
                pageSubtitle.textContent = activeConfig.subtitle;
                searchInput.placeholder = activeConfig.searchPlaceholder;
                document.title = activeConfig.title;

                try {
                    statusMessage.textContent = 'Loading ' + activeConfig.title + '...';
                    const response = await fetch('./' + activeConfig.file);
                    
                    if (!response.ok) {
                        throw new Error('HTTP error! status: ' + response.status + ". Make sure '" + activeConfig.file + "' is in the same folder.");
                    }

                    const yamlText = await response.text();
                    const data = jsyaml.load(yamlText);
                    allItems = data.items || [];
                    allItems.sort((a, b) => a.name.localeCompare(b.name));
                    
                    // Render stats and items
                    statsContainer.innerHTML = activeConfig.renderStats(allItems);
                    renderItems(allItems);
                    statusMessage.textContent = '';

                } catch (error) {
                    console.error('Error loading or parsing YAML file:', error);
                    itemsContainer.innerHTML = '';
                    statsContainer.innerHTML = ''; // Also clear stats on error
                    statusMessage.innerHTML = '<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded" role="alert"><p class="font-bold">Loading Failed</p><p>' + error.message + '</p></div>';
                }
            }

            // --- 4. Render Item Cards to the DOM (Generic) ---
            function renderItems(itemList) {
                itemsContainer.innerHTML = '';
                if (itemList.length === 0) {
                    statusMessage.textContent = 'No items found matching your search.';
                    return;
                }

                itemList.forEach(item => {
                    const card = document.createElement('div');
                    card.className = 'card flex flex-col p-6';
                    const specificDetails = activeConfig.renderDetails(item);

                    card.innerHTML =
                        '<h2 class="text-2xl font-bold mb-2 text-gray-900">' + item.name + '</h2>' +
                        '<p class="text-gray-700 mb-4 flex-grow"><span class="font-semibold">Review:</span> ' + (item.review || 'No review.') + '</p>' +
                        '<div class="mt-auto pt-4 border-t border-gray-200 text-sm text-gray-600 space-y-2">' +
                            '<p><span class="font-semibold">Rating:</span> <span class="text-lg font-bold text-indigo-600">' + (item.rating || '?') + '</span> / 10</p>' +
                            '<p><span class="font-semibold">Device:</span> ' + (item.device || 'N/A') + '</p>' +
                            specificDetails +
                        '</div>';
                    itemsContainer.appendChild(card);
                });
            }

            // --- 5. Handle Search Input ---
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase().trim();
                
                const filteredItems = allItems.filter(item => {
                    // This now checks against the fields specified in the config
                    return activeConfig.searchFields.some(field => {
                        const fieldValue = item[field];
                        if (!fieldValue) return false;
                        return fieldValue.toString().toLowerCase().includes(searchTerm);
                    });
                });
                
                // When searching, we re-render both the stats for the filtered items and the items themselves
                statsContainer.innerHTML = activeConfig.renderStats(filteredItems);
                renderItems(filteredItems);
            });

            // --- 6. Visitor Counter ---
            function updateVisitorCount() {
                // This function fetches the visitor count from a third-party service.
                // NOTE: This may be blocked by ad blockers or privacy extensions.
                const namespace = window.location.hostname || 'local-file-viewer';
                const key = 'main-viewer-counter';
                const apiUrl = 'https://api.countapi.xyz/hit/' + namespace + '/' + key;

                fetch(apiUrl)
                .then(function(response) { return response.json(); })
                .then(function(data) {
                    const countElement = document.getElementById('visitor-count');
                    if (countElement) {
                        countElement.textContent = data.value;
                    }
                })
                .catch(function(error) {
                    // If the fetch fails, update the UI to inform the user.
                    console.error('Error fetching visitor count:', error);
                    const container = document.getElementById('visitor-count-container');
                    if (container) {
                        container.className = 'tooltip-container';
                        
                        const countElement = document.getElementById('visitor-count');
                        countElement.textContent = 'N/A';
                        
                        const tooltip = document.createElement('span');
                        tooltip.className = 'tooltip-text';
                        tooltip.textContent = 'Visitor count could not be loaded. This may be due to a network issue or an ad blocker.';
                        container.appendChild(tooltip);
                    }
                });
            }

            // --- Initial Load ---
            loadData();
            updateVisitorCount();
        });
    </script>
</body>
</html>
